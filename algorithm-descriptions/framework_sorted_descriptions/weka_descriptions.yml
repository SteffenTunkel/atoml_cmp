# Field:       name 
# Description: name of the test, should be unique (duplicate name within same package+framework will lead to problems)

# Field:       type
# Description: type of the algorithm
# Supported values:
#  - classification
#  - clustering+regression planned

# Field:       framework
# Description: Machine learning framework that where the current algorithm is defined
# Supported values:
#  - weka
#  - spark
#  - sklearn

# Field:       package
# Description: package in which the algorithm is implemented

# Field:       class
# Description: name of the class that implements the algorithm

# Field:       features
# Description: defines which features can be used for the training with this algorithm, can be a list if multiple feature types are supported
# Supported values:
#  - DOUBLE          all double values (Java)
#  - FLOAT           all float values (Java)
#  - POSITIVEDOUBLE  positive double values (Java)
#  - POSITIVEFLOAT   positive float values (Java)
#  - UNIT            floating point numbers in [0,1]
#  - CATEGORICAL      categorical data

# Field:       properties
# Description: Defines which properties the algorithm should fulfill. 
# supported properties:
#  - same      re-train with the same data --> expect classes/scores to be the same
#  - scramble  re-train with randomly reordered instances --> expect classes/scores to be the same
#  - reorder   re-train with randomly reordered features --> expect classes/scores to be the same
#  - const     re-train with +1 added to all numeric features --> expect classes/scores to be the same
#  - opposite  re-train with all class labels flipped --> expect classes to be the same, scores inverted (1-priorScore)
# supported evaluations:
#  - score_exac  scores must be exactly the same after re-training
#  - class_exac  classifications must be exactly the same after re-training
#  - class_stat  classifications must not be significantly different from expectation after re-training (chi-squared test)
#  - score_stat  scores of distributionForInstance must not be significantly different from expectation after re-training (KS test)

# Field:       parameters
# Description: List of relevant hyper parameters of the algorithm.
#               Every parameter must specify a default value; the default value can be different from the default in the application
# Supported parameter types:
#  - double     double values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - integer    integer values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - flag       flag that is either enabled or disabled; both will be tested with the default values of the other parameters
#  - fixedflag  a flag that is always used with the default value - probably only makes sense with the value enabled.
#  - values     list of values that will be tested with the default values of the other parameters

####################
# Weka Classifiers #
#################### 

# Functions as classifiers from the package weka.classifiers.functions


name: WEKA_LogisticRegression
type: classification
framework: weka
package: weka.classifiers.functions
class: Logistic
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  R: # ridge value of the log likelihood
    # actually a double, but values give better tests
    type: values
    values: [0] #1.0E-8
    default: 0
  #C: # use conjugate gradiant descent
  #  type: fixedflag
  #  default: disabled
  M: # maximum number of iterations (default -1: until convergence)
    type: integer
    default: 100
---


name: WEKA_MultinomialNB
type: classification
framework: weka
package: weka.classifiers.bayes
class: NaiveBayesMultinomial
features: [positivedouble] # can also binary but do not have that feature type yet
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
  rotate: class_exact
  rescale: class_exact
  clone: class_exact
---

name: WEKA_KNN
type: classification
framework: weka
package: weka.classifiers.lazy
class: IBk
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
  rotate: class_exact
  rescale: class_exact
  clone: class_exact
parameters:
  K: # number of neighbors
    type: integer
    default: 3
  X: # use cross-validation to determine best K
    type: fixedflag
    default: disabled
  I: # weight by 1/distance (not compatible with F)
    type: fixedflag
    default: disabled
  F: # weight by 1-distance (not compatible with I)
    type: fixedflag
    default: disabled
  E: # weather mean-squared error is used instead of mean absolute error for CV
    type: fixedflag
    default: disabled
  A: # distance metric
    type: values
    values: ["weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\""] #"weka.core.neighboursearch.LinearNNSearch -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\"", "weka.core.neighboursearch.BallTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -C \\\\\"weka.core.neighboursearch.balltrees.TopDownConstructor -S weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren -N 40\\\\\"", "weka.core.neighboursearch.CoverTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -B 1.3", "weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\"", "weka.core.neighboursearch.KDTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -S weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide -W 0.01 -L 40 -N"]
    default: "weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\""
---


# name: WEKA_SVM
# type: classification
# framework: weka
# package: weka.classifiers.functions
# class: SMO
# features: [double,categorical]
# properties:
#   same: score_exact
#   scramble: score_exact
#   reorder: score_exact
#   const: score_exact
#   opposite: score_exact
#   rotate: class_exact
#   rescale: class_exact
#   clone: class_exact
# parameters:
#   M: # build calibration models
#     type: fixedflag
#     default: disabled
#   N: # preprocessing of data
#     type: values
#     values: [1] # 0=normalize, 1=standardize, 2=nothing
#     default: 1
#   C: # complexity parameter
#     type: double
#     default: 1.0
#   P: # epsilon for round-off error (should not be changed from default, according to documentation
#     type: values
#     values: [1E-12]
#     default: 1E-12
#   K: # Kernel
#     type: values
#     values: ["weka.classifiers.functions.supportVector.PolyKernel -E 1.0 -C 250007"]
#     default: "weka.classifiers.functions.supportVector.PolyKernel -E 1.0 -C 250007"
# ---

# Lazy classifiers from the package weka.classifiers.lazy



name: WEKA_KNNweighted
type: classification
framework: weka
package: weka.classifiers.lazy
class: IBk
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
  rotate: class_exact
  rescale: class_exact
  clone: class_exact
parameters:
  K: # number of neighbors
    type: integer
    default: 5
  X: # use cross-validation to determine best K
    type: fixedflag
    default: disabled
  I: # weight by 1/distance (not compatible with F)
    type: fixedflag
    default: disabled
  F: # weight by 1-distance (not compatible with I)
    type: fixedflag
    default: enabled
  E: # weather mean-squared error is used instead of mean absolute error for CV
    type: fixedflag
    default: disabled
  A: # distance metric
    type: values
    values: ["weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\""] #"weka.core.neighboursearch.LinearNNSearch -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\"", "weka.core.neighboursearch.BallTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -C \\\\\"weka.core.neighboursearch.balltrees.TopDownConstructor -S weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren -N 40\\\\\"", "weka.core.neighboursearch.CoverTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -B 1.3", "weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\"", "weka.core.neighboursearch.KDTree -A \\\\\"weka.core.EuclideanDistance -R first-last\\\\\" -S weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide -W 0.01 -L 40 -N"]
    default: "weka.core.neighboursearch.FilteredNeighbourSearch -F \\\\\"weka.filters.AllFilter \\\\\" -S \\\\\"weka.core.neighboursearch.LinearNNSearch -A \\\\\\\\\\\\\\\"weka.core.EuclideanDistance -R first-last\\\\\\\\\\\\\\\"\\\\\""
---


# name: WEKA_NAIVEBAYES
# type: classification
# framework: weka
# package: weka.classifiers.bayes
# class: NaiveBayes
# features: [double,categorical]
# properties:
#   same: score_exact
#   scramble: score_exact
#   reorder: score_exact
#   const: score_exact
#   opposite: score_exact
#   rotate: class_exact
#   rescale: class_exact
#   clone: class_exact
# parameters:
#   K: # use gaussian kernel estimator
#     type: flag
#     default: disabled
#   D: # use supervised discretization
#     type: flag
#     default: disabled
# ---

# name: WEKA_SimpleLogistic
# type: classification
# framework: weka
# package: weka.classifiers.functions
# class: SimpleLogistic
# features: [double,categorical]
# properties:
#   same: score_exact
#   scramble: score_exact
#   reorder: score_exact
#   const: score_exact
#   opposite: score_exact
# parameters:
#   P: # error on probabilities
#     type: flag
#     default: disabled
#   H: # heuristic stoping criterion
#     type: integer
#     min: 0
#     max: 100
#     stepsize: 50
#     default: 50
#   M: # maximum of boosting iterations (actually, zero is allowed - is this a bug?)
#     type: integer
#     min: 1
#     max: 999
#     stepsize: 499
#     default: 500
#   I: # sets a fixed number of boosting iterations
#     type: integer
#     min: 0
#     max: 1000
#     stepsize: 500
#     default: 0
#   A: # use AIC to determine number of boosting iterations
#     type: flag
#     default: disabled
#   S: # whether cross-validation is used for determining the number of boosting iterations
#     type: flag
#     default: disabled
#   W: # beta value for weight trimming of boosting
#     type: double
#     min: 0.0
#     max: 0.9
#     stepsize: 0.45
#     default: 0.0
# ---

name: WEKA_MLPgd
type: classification
framework: weka
package: weka.classifiers.functions
class: MultilayerPerceptron
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
  rotate: class_exact
  rescale: class_exact
  clone: class_exact
parameters:
  D: # decay, i.e., decreasing learning rate
    type: flag
    default: disabled
  H: # number of hidden layers (allows numbers and some wildcards, therefore, we use values)
    type: values
    values: ['1'] #[a, i, o, t, 1, 2, 3]
    default: '1'
  L: # learning rate of the gradiant descent
    # actually a double, but values give better tests
    type: double
    default: 0.2
  M: # momentum applied to weight updates
    # actually a double, but values give better tests
    type: values
    values: [0.0] #[0.001, 0.01, 0.1, 0.2]
    default: 0.0
  B: # no nominal to binary filter
    type: fixedflag
    default: disabled
  I: # no normalization of attributes
    type: fixedflag
    default: disabled
  C: # no internal normalization of numeric class attributes
    type: fixedflag
    default: disabled
  R: # no reset of network with lower learning rate in case of convergence
    type: fixedflag
    default: disabled
  N: # number of epochs for training
    type: integer
    default: 100
  V: # validation set size
    type: integer
    default: 0
  E: # validation threshold
    type: integer
    default: 100
---


# name: WEKA_RANDOMFOREST
# type: classification
# framework: weka
# package: weka.classifiers.trees
# class: RandomForest
# features: [double,categorical]
# properties:
#   same: score_exact
#   scramble: score_exact
#   reorder: score_exact
#   const: score_exact
#   opposite: score_exact
#   rotate: class_exact
#   rescale: class_exact
#   clone: class_exact
# parameters:
#   B: # break ties randomly
#     type: fixedflag
#     default: disabled
#   O: # calculate out of bag error
#     type: fixedflag
#     default: disabled
#   attribute-importance: # calculate attribute importance
#     type: fixedflag
#     default: disabled
#   depth: # depth of the trees
#     type: integer
#     default: 3
#   num-slots: # number of threads used
#     type: integer
#     default: 1
#   I: # number of random trees
#     type: integer
#     default: 20
#   M: # minimal sum of weight of all instances in a leaf (default weight per instance is 1.0)
#     # this parameters is not visible in the Weka GUI - Possible BUG
#     type: double
#     default: 1.0
#   V: # minimal variance that must be covered for a split
#     # this parameters is not visible in the Weka GUI - Possible BUG
#     type: double
#     default: 0.001
#   N: # number of folds that are used for backfitting (0 means no backfitting)
#     # this parameters is not visible in the Weka GUI - Possible BUG
#     type: integer
#     default: 0 
# # check numFeatures, this is kinda difficult here
# ---